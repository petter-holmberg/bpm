module;

#include "raylib.h"

export module bpm;

import std;

namespace bpm::inline v0 {

export struct point2d
{
    std::int32_t x {};
    std::int32_t y {};

    [[nodiscard]] friend constexpr bool operator==(point2d p0, point2d p1) noexcept = default;
};

static_assert(std::regular<point2d>);

export struct vector2d
{
    std::int32_t x {};
    std::int32_t y {};

    [[nodiscard]] friend constexpr bool operator==(vector2d v0, vector2d v1) noexcept = default;
};

static_assert(std::regular<vector2d>);

export [[nodiscard]] constexpr vector2d
operator+(vector2d v0, vector2d v1) noexcept
{
    return { v0.x + v1.x, v0.y + v1.y };
}

export constexpr vector2d&
operator+=(vector2d& v0, vector2d v1) noexcept
{
    v0.x += v1.x;
    v0.y += v1.y;
    return v0;
}

export [[nodiscard]] constexpr vector2d
operator-(vector2d const& v) noexcept
{
    return { -v.x, -v.y };
}

export [[nodiscard]] constexpr vector2d
operator-(vector2d v0, vector2d v1) noexcept
{
    return v0 + -v1;
}

export constexpr vector2d&
operator-=(vector2d& v0, vector2d v1) noexcept
{
    v0.x -= v1.x;
    v0.y -= v1.y;
    return v0;
}

export template <typename S>
[[nodiscard]] constexpr vector2d
operator*(S s, vector2d v) noexcept
{
    return { s * v.x, s * v.y };
}

export template <typename S>
[[nodiscard]] constexpr vector2d
operator*(vector2d v, S s) noexcept
{
    return { v.x * s, v.y * s };
}

export template <typename S>
[[nodiscard]] constexpr vector2d
operator/(vector2d v, S s) noexcept
{
    return { v.x / s, v.y / s };
}

export [[nodiscard]] constexpr point2d
operator+(point2d const& p, vector2d v) noexcept
{
    return { p.x + v.x, p.y + v.y };
}

export [[nodiscard]] constexpr point2d
operator+(vector2d v, point2d p) noexcept
{
    return p + v;
}

export constexpr point2d&
operator+=(point2d& p, vector2d v) noexcept
{
    p.x += v.x;
    p.y += v.y;
    return p;
}

export [[nodiscard]] constexpr point2d
operator-(point2d p, vector2d v) noexcept
{
    return p + (-v);
}

export [[nodiscard]] constexpr vector2d
operator-(point2d p0, point2d p1) noexcept
{
    return { p0.x - p1.x, p0.y - p1.y };
}

export constexpr point2d&
operator-=(point2d& p, vector2d v) noexcept
{
    p.x -= v.x;
    p.y -= v.y;
    return p;
}

export struct rotation
{
    float degrees{};
};

export struct color
{
    std::uint8_t r {};
    std::uint8_t g {};
    std::uint8_t b {};
    std::uint8_t a {255};

    [[nodiscard]] friend constexpr bool operator==(color c0, color c1) noexcept = default;
};

static_assert(std::regular<color>);

export inline constexpr color aliceblue {240, 248, 255, 255};
export inline constexpr color antiquewhite {250, 235, 215, 255};
export inline constexpr color aqua {0, 255, 255, 255};
export inline constexpr color aquamarine {127, 255, 212, 255};
export inline constexpr color azure {240, 255, 255, 255};
export inline constexpr color beige {245, 245, 220, 255};
export inline constexpr color bisque {255, 228, 196, 255};
export inline constexpr color black {0, 0, 0, 255};
export inline constexpr color blanchedalmond {255, 235, 205, 255};
export inline constexpr color blue {0, 0, 255, 255};
export inline constexpr color blueviolet{138, 43, 226, 255};
export inline constexpr color brown {165, 42, 42, 255};
export inline constexpr color burlywood {222, 184, 135, 255};
export inline constexpr color cadetblue {95, 158, 160, 255};
export inline constexpr color chartreuse{95, 158, 160, 255};
export inline constexpr color chocolate {210, 105, 30, 255};
export inline constexpr color coral {255, 127, 80, 255};
export inline constexpr color cornflowerblue{100, 149, 237, 255};
export inline constexpr color cornsilk {255, 248, 220, 255};
export inline constexpr color crimson {220, 20, 60, 255};
export inline constexpr color cyan {0, 255, 255, 255};
export inline constexpr color darkblue {0, 0, 139, 255};
export inline constexpr color darkcyan {0, 139, 139, 255};
export inline constexpr color darkgoldenrod {184, 134, 11, 255};
export inline constexpr color darkgray {169, 169, 169, 255};
export inline constexpr color darkgreen {0, 100, 0, 255};
export inline constexpr color darkkhaki {189, 183, 107, 255};
export inline constexpr color darkmagenta {139, 0, 139, 255};
export inline constexpr color darkolivegreen {85, 107, 47, 255};
export inline constexpr color darkorange {255, 140, 0, 255};
export inline constexpr color darkorchid {153, 50, 204, 255};
export inline constexpr color darkred {139, 0, 0, 255};
export inline constexpr color darksalmon {233, 150, 122, 255};
export inline constexpr color darkseagreen {143, 188, 143, 255};
export inline constexpr color darkslateblue {72, 61, 139, 255};
export inline constexpr color darkslategray {47, 79, 79, 255};
export inline constexpr color darkturquoise {0, 206, 209, 255};
export inline constexpr color darkviolet {148, 0, 211, 255};
export inline constexpr color deeppink {255, 20, 147, 255};
export inline constexpr color deepskyblue {0, 191, 255, 255};
export inline constexpr color dimgray {0, 191, 255, 255};
export inline constexpr color dodgerblue {30, 144, 255, 255};
export inline constexpr color firebrick {178, 34, 34, 255};
export inline constexpr color floralwhite {255, 250, 240, 255};
export inline constexpr color forestgreen {34, 139, 34, 255};
export inline constexpr color fuchsia {255, 0, 255, 255};
export inline constexpr color gainsboro {220, 220, 220, 255};
export inline constexpr color ghostwhite {248, 248, 255, 255};
export inline constexpr color gold {255, 215, 0, 255};
export inline constexpr color goldenrod {218, 165, 32, 255};
export inline constexpr color gray {127, 127, 127, 255};
export inline constexpr color green {0, 128, 0, 255};
export inline constexpr color greenyellow {173, 255, 47, 255};
export inline constexpr color honeydew {240, 255, 240, 255};
export inline constexpr color hotpink {255, 105, 180, 255};
export inline constexpr color indianred {205, 92, 92, 255};
export inline constexpr color indigo {75, 0, 130, 255};
export inline constexpr color ivory {255, 255, 240, 255};
export inline constexpr color khaki {240, 230, 140, 255};
export inline constexpr color lavender {230, 230, 250, 255};
export inline constexpr color lavenderblush {255, 240, 245, 255};
export inline constexpr color lawngreen {124, 252, 0, 255};
export inline constexpr color lemonchiffon {255, 250, 205, 255};
export inline constexpr color lightblue {173, 216, 230, 255};
export inline constexpr color lightcoral {240, 128, 128, 255};
export inline constexpr color lightcyan {224, 255, 255, 255};
export inline constexpr color lightgoldenrodyellow {250, 250, 210, 255};
export inline constexpr color lightgreen {144, 238, 144, 255};
export inline constexpr color lightgrey {211, 211, 211, 255};
export inline constexpr color lightpink {255, 182, 193, 255};
export inline constexpr color lightsalmon {255, 160, 122, 255};
export inline constexpr color lightseagreen {32, 178, 170, 255};
export inline constexpr color lightskyblue {135, 206, 250, 255};
export inline constexpr color lightslategray {119, 136, 153, 255};
export inline constexpr color lightsteelblue {176, 196, 222, 255};
export inline constexpr color lightyellow {255, 255, 224, 255};
export inline constexpr color lime {0, 255, 0, 255};
export inline constexpr color limegreen {50, 205, 50, 255};
export inline constexpr color linen {250, 240, 230, 255};
export inline constexpr color magenta {255, 0, 255, 255};
export inline constexpr color maroon {128, 0, 0, 255};
export inline constexpr color mediumaquamarine {102, 205, 170, 255};
export inline constexpr color mediumblue {0, 0, 205, 255};
export inline constexpr color mediumorchid {186, 85, 211, 255};
export inline constexpr color mediumpurple {147, 112, 219, 255};
export inline constexpr color mediumseagreen {60, 179, 113, 255};
export inline constexpr color mediumslateblue {123, 104, 238, 255};
export inline constexpr color mediumspringgreen {0, 250, 154, 255};
export inline constexpr color mediumturquoise {72, 209, 204, 255};
export inline constexpr color mediumvioletred {199, 21, 133, 255};
export inline constexpr color midnightblue {25, 25, 112, 255};
export inline constexpr color mintcream {245, 255, 250, 255};
export inline constexpr color mistyrose {255, 228, 225, 255};
export inline constexpr color moccasin {255, 228, 181, 255};
export inline constexpr color navajowhite {255, 222, 173, 255};
export inline constexpr color navy {0, 0, 128, 255};
export inline constexpr color navyblue {159, 175, 223, 255};
export inline constexpr color oldlace {253, 245, 230, 255};
export inline constexpr color olive {128, 128, 0, 255};
export inline constexpr color olivedrab {107, 142, 35, 255};
export inline constexpr color orange {255, 165, 0, 255};
export inline constexpr color orangered {255, 69, 0, 255};
export inline constexpr color orchid {218, 112, 214, 255};
export inline constexpr color palegoldenrod {238, 232, 170, 255};
export inline constexpr color palegreen {152, 251, 152, 255};
export inline constexpr color paleturquoise {175, 238, 238, 255};
export inline constexpr color palevioletred {219, 112, 147, 255};
export inline constexpr color papayawhip {255, 239, 213, 255};
export inline constexpr color peachpuff {255, 218, 185, 255};
export inline constexpr color peru {205, 133, 63, 255};
export inline constexpr color pink {255, 192, 203, 255};
export inline constexpr color plum {221, 160, 221, 255};
export inline constexpr color powderblue {176, 224, 230, 255};
export inline constexpr color purple {128, 0, 128, 255};
export inline constexpr color red {255, 0, 0, 255};
export inline constexpr color rosybrown {188, 143, 143, 255};
export inline constexpr color royalblue {65, 105, 225, 255};
export inline constexpr color saddlebrown {139, 69, 19, 255};
export inline constexpr color salmon {250, 128, 114, 255};
export inline constexpr color sandybrown {244, 164, 96, 255};
export inline constexpr color seagreen {46, 139, 87, 255};
export inline constexpr color seashell {255, 245, 238, 255};
export inline constexpr color sienna {160, 82, 45, 255};
export inline constexpr color silver {192, 192, 192, 255};
export inline constexpr color skyblue {135, 206, 235, 255};
export inline constexpr color slateblue {106, 90, 205, 255};
export inline constexpr color slategray {112, 128, 144, 255};
export inline constexpr color snow {255, 250, 250, 255};
export inline constexpr color springgreen {0, 255, 127, 255};
export inline constexpr color steelblue {70, 130, 180, 255};
export inline constexpr color tan {210, 180, 140, 255};
export inline constexpr color teal {0, 128, 128, 255};
export inline constexpr color thistle {216, 191, 216, 255};
export inline constexpr color tomato {255, 99, 71, 255};
export inline constexpr color turquoise {64, 224, 208, 255};
export inline constexpr color violet {238, 130, 238, 255};
export inline constexpr color wheat {245, 222, 179, 255};
export inline constexpr color white {255, 255, 255, 255};
export inline constexpr color whitesmoke {245, 245, 245, 255};
export inline constexpr color yellow {255, 255, 0, 255};
export inline constexpr color yellowgreen {139, 205, 50, 255};

float srgb2linear(float x) noexcept
{
    return x * (x * (x * 0.30530611f + 0.682171111f) + 0.012522878f);
}

float linear2srgb(float x) noexcept
{
    float s0 = std::sqrtf(x);
    float s1 = std::sqrtf(s0);
    float s2 = std::sqrtf(s1);
    return std::clamp(0.662002687f * s0 + 0.684122060f * s1 - 0.323583601f * s2 - 0.0225411470f * x, 0.f, 1.f);
}

std::uint8_t blend_component(float x, float y, float fraction) noexcept
{
    return static_cast<std::uint8_t>(linear2srgb(srgb2linear(float(x) / 256.f) * fraction + srgb2linear(float(y) / 256.f) * (1 - fraction)) * 256.f);
}

export auto
blend(color c0, color c1, float fraction) noexcept -> color
{
    return {
        blend_component(c0.r, c1.r, fraction),
        blend_component(c0.g, c1.g, fraction),
        blend_component(c0.b, c1.b, fraction),
        static_cast<std::uint8_t>(((float(c0.a) / 256.f) * fraction + (float(c1.a) / 256.f) * (1 - fraction)) * 256.f)
    };
}

export struct pixel
{
    color col;

    [[nodiscard]] friend constexpr bool operator==(pixel p0, pixel p1) noexcept = default;
};

static_assert(std::regular<pixel>);

export struct line2d
{
    vector2d dir;
    color col;

    constexpr line2d() noexcept = default;

    constexpr line2d(vector2d d, color c) noexcept
        : dir{d}, col{c}
    {}

    [[nodiscard]] friend constexpr bool operator==(line2d l0, line2d l1) noexcept = default;
};

export struct circle
{
    float radius{};
    color col;

    constexpr circle() noexcept = default;

    constexpr circle(float r, color c) noexcept
        : radius{r}, col{c}
    {}

    [[nodiscard]] friend constexpr bool operator==(circle c0, circle c1) noexcept = default;
};

export struct triangle
{
    vector2d dir0;
    vector2d dir1;
    color col;

    constexpr triangle() noexcept = default;

    constexpr triangle(vector2d d0, vector2d d1, color c) noexcept
        : dir0{d0}, dir1{d1}, col{c}
    {
        if (dir0.y * (dir1.x - dir0.x) - dir0.x * (dir1.y - dir0.y) < 0) {
            std::ranges::swap(dir0, dir1);
        }
    }

    [[nodiscard]] friend constexpr bool operator==(triangle t0, triangle t1) noexcept = default;
};

export struct rectangle
{
    vector2d size;
    color col;

    constexpr rectangle() noexcept = default;

    constexpr rectangle(vector2d s, color c) noexcept
        : size{s}, col{c}
    {}

    [[nodiscard]] friend constexpr bool operator==(rectangle r0, rectangle r1) noexcept = default;
};

class texture;

export class image
{
    std::vector<color> data;
    ::Image img{};

    friend class texture;

public:

    image() = default;

    explicit image(vector2d size)
        : data(size.x * size.y, {0, 0, 0, 0})
        , img{
            .data = std::bit_cast<void*>(data.begin()),
            .width = size.x,
            .height = size.y,
            .mipmaps = 1,
            .format = ::PIXELFORMAT_UNCOMPRESSED_R8G8B8A8
        }
    {}

    vector2d size() const noexcept
    {
        return {img.width, img.height};
    }

    color const& operator()(point2d pos) const
    {
        return *(data.cbegin() + (pos.x + img.width * pos.y));
    }

    color& operator()(point2d pos)
    {
        return *(data.begin() + (pos.x + img.width * pos.y));
    }
};

class window;

enum class resize_algo
{
    bicubic,
    nearest_neighbor,
};

export class texture
{
    ::Texture tex{};

    friend class frame;

public:

    struct uv
    {
        point2d pos;
        vector2d size;
    };

    struct transform
    {
        vector2d pivot{};
        rotation rotation{.degrees{0.f}};
        float scale{1.f};
    };

    ~texture()
    {
        if (tex.id != 0) {
            ::UnloadTexture(tex);
        }
    }

    texture() noexcept = default;

    texture(texture const& t) noexcept
    {
        auto img{::LoadImageFromTexture(t.tex)};
        tex = ::LoadTextureFromImage(img);
        ::UnloadImage(img);
    }

    void swap(texture& t) noexcept
    {
        std::swap(tex, t.tex);
    }

    texture& operator=(texture const& t)
    {
        texture temp{t};
        swap(temp);
        return *this;
    }

    texture(texture&& t)
        : tex{std::exchange(t.tex, ::Texture{})}
    {}

    texture& operator=(texture&& t)
    {
        if (this != &t) {
            tex = std::exchange(t.tex, ::Texture{});
        }
        return *this;
    }

    texture(window const&, vector2d size, color col = black) noexcept
    {
        auto img{::GenImageColor(size.x, size.y, ::Color{col.r, col.g, col.b, col.a})};
        tex = ::LoadTextureFromImage(img);
        ::UnloadImage(img);
    }

    texture(window const&, image const& img) noexcept
    {
        tex = ::LoadTextureFromImage(img.img);
    }

    texture(window const&, std::filesystem::path const& path) noexcept
    {
        tex = ::LoadTexture(path.string().c_str());
    }

    vector2d size() const noexcept
    {
        return {tex.width, tex.height};
    }

    void resize(vector2d size, resize_algo algo = resize_algo::bicubic) noexcept
    {
        if (size != this->size()) {
            auto img{::LoadImageFromTexture(tex)};

            if (algo == resize_algo::nearest_neighbor) {
                ::ImageResizeNN(&img, size.x, size.y);
            } else {
                ::ImageResize(&img, size.x, size.y);
            }

            if (tex.id != 0) {
                ::UnloadTexture(tex);
            }

            tex = ::LoadTextureFromImage(img);
            ::UnloadImage(img);
        }
    }
};

class text;

export inline const std::filesystem::path font_noto_sans_regular = "data/NotoSans-Regular.ttf";
export inline const std::filesystem::path font_noto_sans_mono_regular = "data/NotoSansMono-Regular.ttf";
export inline const std::filesystem::path font_noto_serif_regular = "data/NotoSerif-Regular.ttf";

export class font
{
    ::Font fnt{};

    friend class frame;
    friend class text;

public:

    ~font()
    {
        ::UnloadFont(fnt);
    }

    font(font const&) = delete;

    void swap(font& f) noexcept
    {
        std::swap(fnt, f.fnt);
    }

    font& operator=(font const&) = delete;

    font(font&& f)
        : fnt{std::exchange(f.fnt, ::Font{})}
    {}

    font& operator=(font&& f)
    {
        if (this != &f) {
            fnt = std::exchange(f.fnt, ::Font{});
        }
        return *this;
    }

    font(window const&, std::int32_t size, std::filesystem::path const& path = font_noto_sans_regular) noexcept
        : fnt{::LoadFontEx(path.string().c_str(), size, nullptr, 0)}
    {}
};

export class text
{
    font* fnt{};
    std::string txt;
    color col;

    friend class frame;

public:

    text(std::string_view t, font& f, color c) noexcept
        : fnt{&f}
        , txt{t}
        , col{c}
    {}

    vector2d size() const noexcept
    {
        auto s{::MeasureTextEx(fnt->fnt, txt.c_str(), float(fnt->fnt.baseSize), 0)};
        return {std::int32_t(s.x), std::int32_t(s.y)};
    }
};

export auto mouse_cursor() noexcept -> bool
{
    return !::IsCursorHidden();
}

export void mouse_cursor_hide() noexcept
{
    ::HideCursor();
}

export void mouse_cursor_show() noexcept
{
    ::ShowCursor();
}

export auto mouse_cursor_position() noexcept -> vector2d
{
    ::Vector2 pos{::GetMousePosition()};
    return {std::int32_t(pos.x), std::int32_t(pos.y)};
}

export void mouse_cursor_position_set(vector2d pos) noexcept
{
    ::SetMousePosition(pos.x, pos.y);
}

export auto mouse_button(int button) noexcept -> bool
{
    return ::IsMouseButtonDown(button);
}

export auto mouse_wheel() noexcept -> vector2d
{
    auto vec{::GetMouseWheelMoveV()};
    return {std::int32_t(vec.x), std::int32_t(vec.y)};
}

class frame;

export class window
{
public:
    struct config
    {
        vector2d size = {};
        std::int32_t fps = 60;
        std::string title;
        bool fullscreen = true;
        bool visible = true;
        bool focused = true;
        bool hide_cursor = true;
    };

private:
    config settings;
    vector2d pixel_size;

public:

    ~window()
    {
        ::CloseWindow();
    }

    explicit window(config settings = {}) noexcept
        : settings{settings}
    {
        ::InitWindow(settings.size.x, settings.size.y, settings.title.c_str());
        unsigned int flags{};
        if (settings.fullscreen) {
            flags |= ::FLAG_FULLSCREEN_MODE;
        }
        ::SetWindowState(flags);
        if (settings.fps > 0) {
            ::SetTargetFPS(settings.fps);
        }
        if (settings.size == vector2d{}) {
            pixel_size = {::GetScreenWidth(), ::GetScreenHeight()};
        }
        if (settings.hide_cursor) {
            mouse_cursor_hide();
        }
    }

    window(window const&) = delete;
    window& operator=(window const&) = delete;
    window(window&&) = delete;
    window& operator=(window&&) = delete;

    operator bool() const noexcept
    {
        return !::WindowShouldClose();
    }

    vector2d size() const noexcept
    {
        return pixel_size;
    }

    std::int32_t fps() const noexcept
    {
        return ::GetFPS();
    }

    class const_iterator
    {
        const window* w;

    public:

        using iterator_concept = std::input_iterator_tag;
        using value_type = frame;
        using difference_type = std::int64_t;

        explicit const_iterator(const window& win)
            : w{&win}
        {}

        const_iterator(const_iterator const&) = delete;
        const_iterator& operator=(const_iterator const&) = delete;
        const_iterator(const_iterator&&) = default;
        const_iterator& operator=(const_iterator&&) = default;

        frame operator*() const;

        const_iterator& operator++() noexcept
        {
            return *this;
        }

        void operator++(int) noexcept
        {}
    };

    struct sentinel
    {
        [[nodiscard]] friend bool operator==(const_iterator const&, sentinel) noexcept
        {
            return ::WindowShouldClose();
        }

        [[nodiscard]] friend bool operator==(sentinel, const_iterator const&) noexcept
        {
            return ::WindowShouldClose();
        }

        [[nodiscard]] friend bool operator!=(const_iterator const&, sentinel) noexcept
        {
            return !::WindowShouldClose();
        }

        [[nodiscard]] friend bool operator!=(sentinel, const_iterator const&) noexcept
        {
            return !::WindowShouldClose();
        }
    };

    const_iterator begin() const noexcept
    {
        return const_iterator{*this};
    }

    sentinel end() const noexcept
    {
        return {};
    }
};

export class frame
{
    const window* w = nullptr;

public:

    using iterator_concept = std::input_iterator_tag;
    using value_type = image;
    using difference_type = std::int64_t;

    explicit frame(const window& win)
        : w{&win}
    {
        ::BeginDrawing();
    }

    ~frame()
    {
        if (w) {
            ::EndDrawing();
        }
    }

    frame(frame const&) = delete;
    frame& operator=(frame const&) = delete;

    frame(frame&& f)
        : w{std::exchange(f.w, nullptr)}
    {}

    frame& operator=(frame&& f)
    {
        if (this != &f) {
            w = std::exchange(f.w, nullptr);
        }
        return *this;
    }

    image operator*() const
    {
        return image{size()};
    }

    void next() const
    {
        ::EndDrawing();
        ::BeginDrawing();
    }

    void operator()(color col) const noexcept
    {
        ::ClearBackground(::Color{col.r, col.g, col.b, col.a});
    }

    void operator()(pixel pix, point2d pos) const noexcept
    {
        ::DrawPixel(pos.x, pos.y, ::Color{pix.col.r, pix.col.g, pix.col.b, pix.col.a});
    }

    void operator()(line2d line, point2d pos) const noexcept
    {
        point2d end = pos + line.dir;
        ::DrawLine(pos.x, pos.y, end.x, end.y, ::Color{line.col.r, line.col.g, line.col.b, line.col.a});
    }

    void operator()(circle c, point2d pos) const noexcept
    {
        auto x_max = std::int32_t(c.radius);
        for (std::int32_t y = 0; y <= c.radius; ++y) {
            for (std::int32_t x = x_max; x >= 0; --x) {
                if ((x * x) + (y * y) <= (c.radius * c.radius)) {
                    ::DrawLine(pos.x - x, pos.y - y, pos.x + x, pos.y - y,::Color{c.col.r, c.col.g, c.col.b, c.col.a});
                    x_max = x;
                    break;
                }
            }
        }
        x_max = std::int32_t(c.radius);
        for (std::int32_t y = 1; y <= c.radius; ++y) {
            for (std::int32_t x = x_max; x >= 0; --x) {
                if ((x * x) + (y * y) <= (c.radius * c.radius)) {
                    ::DrawLine(pos.x - x, pos.y + y, pos.x + x, pos.y + y,::Color{c.col.r, c.col.g, c.col.b, c.col.a});
                    x_max = x;
                    break;
                }
            }
        }
    }

    void operator()(triangle t, point2d pos) const noexcept
    {
        ::DrawTriangle(
            ::Vector2{float(pos.x), float(pos.y)},
            ::Vector2{float(pos.x + t.dir0.x), float(pos.y + t.dir0.y)},
            ::Vector2{float(pos.x + t.dir1.x), float(pos.y + t.dir1.y)},
            ::Color{t.col.r, t.col.g, t.col.b, t.col.a}
        );
    }

    void operator()(rectangle r, point2d pos) const noexcept
    {
        ::DrawRectangle(pos.x, pos.y, r.size.x, r.size.y, ::Color{r.col.r, r.col.g, r.col.b, r.col.a});
    }

    void operator()(texture const& tex, point2d pos) const noexcept
    {
        ::DrawTexture(tex.tex, pos.x, pos.y, ::WHITE);
    }

    void operator()(texture const& tex, texture::uv uv, point2d pos) const noexcept
    {
        ::DrawTextureRec(
            tex.tex,
            ::Rectangle{float(uv.pos.x), float(uv.pos.y), float(uv.size.x), float(uv.size.y)},
            ::Vector2{float(pos.x), float(pos.y)},
            ::WHITE
        );
    }

    void operator()(texture const& tex, texture::uv uv, texture::transform transform, point2d pos) const noexcept
    {
        ::DrawTexturePro(
            tex.tex,
            ::Rectangle{float(uv.pos.x), float(uv.pos.y), float(uv.size.x), float(uv.size.y)},
            ::Rectangle{
                float(pos.x),
                float(pos.y),
                transform.scale * tex.size().x,
                transform.scale * tex.size().y
            },
            ::Vector2{transform.scale * float(transform.pivot.x),
            transform.scale * float(transform.pivot.y)},
            transform.rotation.degrees, WHITE
        );
    }

    void operator()(text const& t, point2d pos) const noexcept
    {
        ::DrawTextEx(
            t.fnt->fnt,
            t.txt.c_str(),
            ::Vector2{float(pos.x), float(pos.y)},
            float(t.fnt->fnt.baseSize),
            0,
            ::Color{t.col.r, t.col.g, t.col.b, t.col.a});
    }

    vector2d size() const noexcept
    {
        return w->size();
    }
};

frame window::const_iterator::operator*() const
{
    return frame{*w};
}

static_assert(std::input_iterator<window::const_iterator>);

static_assert(std::ranges::input_range<window>);

export struct audio_device
{
    ~audio_device()
    {
        ::CloseAudioDevice();
    }

    audio_device()
    {
        ::InitAudioDevice();
    }

    audio_device(audio_device const&) = delete;
    audio_device& operator=(audio_device const&) = delete;
    audio_device(audio_device&&) = delete;
    audio_device& operator=(audio_device&&) = delete;

    operator bool() const noexcept
    {
        return ::IsAudioDeviceReady();
    }

    void set_volume(float vol) noexcept
    {
        ::SetMasterVolume(vol);
    }
};

export class sound
{
    Sound snd{};

public:

    ~sound()
    {
        stop();
        ::UnloadSound(snd);
    }

    sound(std::filesystem::path const& path)
        : snd{::LoadSound(path.string().c_str())}
    {}

    sound(sound const&) = delete;
    sound& operator=(sound const&) = delete;
    sound(sound&&) = delete;
    sound& operator=(sound&&) = delete;

    operator bool() const noexcept
    {
        return ::IsSoundReady(snd);
    }

    void play() noexcept
    {
        stop();
        ::PlaySound(snd);
    }

    void stop() noexcept
    {
        if (::IsSoundPlaying(snd)) {
            ::StopSound(snd);
        }
    }
};

export class music
{
    Music mus{};
    bool is_stopped{};
    bool is_paused{};

public:

    ~music()
    {
        stop();
        ::UnloadMusicStream(mus);
    }

    music(std::filesystem::path const& path)
        : mus{::LoadMusicStream(path.string().c_str())}
        , is_paused{true}
    {}

    music(music const&) = delete;
    music& operator=(music const&) = delete;
    music(music&&) = delete;
    music& operator=(music&&) = delete;

    operator bool() const noexcept
    {
        return ::IsMusicReady(mus);
    }

    void update()
    {
        ::UpdateMusicStream(mus);
    }

    void play() noexcept
    {
        if (is_paused && !is_stopped) {
            ::ResumeMusicStream(mus);
        } else {
            stop();
            ::PlayMusicStream(mus);
        }
        is_stopped = false;
        is_paused = false;
    }

    void pause() noexcept
    {
        if (is_playing()) {
            ::PauseMusicStream(mus);
        }
        is_paused = true;
    }

    void stop() noexcept
    {
        if (is_playing()) {
            ::StopMusicStream(mus);
        }
        is_stopped = true;
        is_paused = false;
    }

    bool is_playing() const noexcept
    {
        return ::IsMusicStreamPlaying(mus);
    }

    auto duration_played() const noexcept -> std::chrono::milliseconds
    {
        return std::chrono::milliseconds{std::int64_t(1000 * ::GetMusicTimePlayed(mus))};
    }

    auto duration() const noexcept -> std::chrono::milliseconds
    {
        return std::chrono::milliseconds{std::int64_t(1000 * ::GetMusicTimeLength(mus))};
    }
};

export enum class key
{
    none = ::KEY_NULL,
    apostrophe = ::KEY_APOSTROPHE,
    comma = ::KEY_COMMA,
    minus = ::KEY_MINUS,
    period = ::KEY_PERIOD,
    slash = ::KEY_SLASH,
    zero = ::KEY_ZERO,
    one = ::KEY_ONE,
    two = ::KEY_TWO,
    three = ::KEY_THREE,
    four = ::KEY_FOUR,
    five = ::KEY_FIVE,
    six = ::KEY_SIX,
    seven = ::KEY_SEVEN,
    eight = ::KEY_EIGHT,
    nine = ::KEY_NINE,
    semicolon = ::KEY_SEMICOLON,
    equal = ::KEY_EQUAL,
    a = ::KEY_A,
    b = ::KEY_B,
    c = ::KEY_C,
    d = ::KEY_D,
    e = ::KEY_E,
    f = ::KEY_F,
    g = ::KEY_G,
    h = ::KEY_H,
    i = ::KEY_I,
    j = ::KEY_J,
    k = ::KEY_K,
    l = ::KEY_L,
    m = ::KEY_M,
    n = ::KEY_N,
    o = ::KEY_O,
    p = ::KEY_P,
    q = ::KEY_Q,
    r = ::KEY_R,
    s = ::KEY_S,
    t = ::KEY_T,
    u = ::KEY_U,
    v = ::KEY_V,
    w = ::KEY_W,
    x = ::KEY_X,
    y = ::KEY_Y,
    z = ::KEY_Z,
    left_bracket = ::KEY_LEFT_BRACKET,
    backslash = ::KEY_BACKSLASH,
    right_bracket = ::KEY_RIGHT_BRACKET,
    grave = ::KEY_GRAVE,
    space = ::KEY_SPACE,
    escape = ::KEY_ESCAPE,
    enter = ::KEY_ENTER,
    tab = ::KEY_TAB,
    backspace = ::KEY_BACKSPACE,
    insert = ::KEY_INSERT,
    del = ::KEY_DELETE,
    right = ::KEY_RIGHT,
    left = ::KEY_LEFT,
    down = ::KEY_DOWN,
    up = ::KEY_UP,
    page_up = ::KEY_PAGE_UP,
    page_down = ::KEY_PAGE_DOWN,
    home = ::KEY_HOME,
    end = ::KEY_END,
    caps_lock = ::KEY_CAPS_LOCK,
    scroll_lock = ::KEY_SCROLL_LOCK,
    num_lock = ::KEY_NUM_LOCK,
    print_screen = ::KEY_PRINT_SCREEN,
    pause = ::KEY_PAUSE,
    f1 = ::KEY_F1,
    f2 = ::KEY_F2,
    f3 = ::KEY_F3,
    f4 = ::KEY_F4,
    f5 = ::KEY_F5,
    f6 = ::KEY_F6,
    f7 = ::KEY_F7,
    f8 = ::KEY_F8,
    f9 = ::KEY_F9,
    f10 = ::KEY_F10,
    f11 = ::KEY_F11,
    f12 = ::KEY_F12,
    left_shift = ::KEY_LEFT_SHIFT,
    left_control = ::KEY_LEFT_CONTROL,
    left_alt = ::KEY_LEFT_ALT,
    left_super = ::KEY_LEFT_SUPER,
    key_right_shift = ::KEY_RIGHT_SHIFT,
    key_right_control = ::KEY_RIGHT_CONTROL,
    key_right_alt = ::KEY_RIGHT_ALT,
    key_right_super = ::KEY_RIGHT_SUPER,
    kb_meny = ::KEY_KB_MENU,
    keypad_0 = ::KEY_KP_0,
    keypad_1 = ::KEY_KP_1,
    keypad_2 = ::KEY_KP_2,
    keypad_3 = ::KEY_KP_3,
    keypad_4 = ::KEY_KP_4,
    keypad_5 = ::KEY_KP_5,
    keypad_6 = ::KEY_KP_6,
    keypad_7 = ::KEY_KP_7,
    keypad_8 = ::KEY_KP_8,
    keypad_9 = ::KEY_KP_9,
    keypad_decimal = ::KEY_KP_DECIMAL,
    keypad_divide = ::KEY_KP_DIVIDE,
    keypad_multiply = ::KEY_KP_MULTIPLY,
    keypad_subtract = ::KEY_KP_SUBTRACT,
    keypad_add = ::KEY_KP_ADD,
    keypad_enter = ::KEY_KP_ENTER,
    keypad_equal = ::KEY_KP_EQUAL,
    android_back = ::KEY_BACK,
    android_menu = ::KEY_MENU,
    android_volume_up = ::KEY_VOLUME_UP,
    android_volume_down = ::KEY_VOLUME_DOWN
};

export bool key_down(key k) noexcept
{
    return ::IsKeyDown(static_cast<int>(k));
}

export bool key_pressed(key k) noexcept
{
    return ::IsKeyPressed(static_cast<int>(k));
}

export bool key_released(key k) noexcept
{
    return ::IsKeyReleased(static_cast<int>(k));
}

}
